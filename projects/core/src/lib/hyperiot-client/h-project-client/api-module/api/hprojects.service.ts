/**
 * HyperIoT HProject
 * HyperIoT HProject API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: users@acsoftware.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AutoRegisterProjectRequest } from '../../../models/autoRegisterProjectRequest';
import { HProject } from '../../../models/hProject';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../../../models/configuration';


@Injectable()
export class HprojectsService {

    protected basePath = '/hyperiot/hprojects';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * /hyperiot/hprojects/register
     * Service for adding a new empty hproject entity for register devices with gateway
     * @param body HProject entity which must be saved 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public autoRegisterHProject(body: AutoRegisterProjectRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public autoRegisterHProject(body: AutoRegisterProjectRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public autoRegisterHProject(body: AutoRegisterProjectRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public autoRegisterHProject(body: AutoRegisterProjectRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling autoRegisterHProject.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/register`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/all/cards
     * Service for finding all hproject entities
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsView(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cardsView(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cardsView(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cardsView(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/all/cards`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/module/status
     * Simple service for checking module status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkModuleWorking(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public checkModuleWorking(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public checkModuleWorking(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public checkModuleWorking(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/module/status`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/{id}/hadoopData
     * Delete Hadoop data of this project, i.e. data on HDFS and HBase 
     * @param id id of the project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clearHadoopData(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public clearHadoopData(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public clearHadoopData(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public clearHadoopData(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling clearHadoopData.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(id))}/hadoopData`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/auto-register-project/challenge/{projectId}
     * Service for adding a new empty hproject entity for autoregister devices with gateway
     * @param projectId HProject id which must be used forgenerating the challenge 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createChallengeForAutoRegister(projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createChallengeForAutoRegister(projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createChallengeForAutoRegister(projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createChallengeForAutoRegister(projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createChallengeForAutoRegister.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/auto-register-project/challenge/${encodeURIComponent(String(projectId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/{id}
     * Service for deleting a hproject entity
     * @param id The hproject id which must be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteHProject(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteHProject(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteHProject(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteHProject(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteHProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/all
     * Service for finding all hproject entities
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllHProject(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findAllHProject(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findAllHProject(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findAllHProject(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects
     * Service for finding all hproject entities
     * @param delta 
     * @param page 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllHProjectPaginated(delta?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findAllHProjectPaginated(delta?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findAllHProjectPaginated(delta?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findAllHProjectPaginated(delta?: number, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (delta !== undefined && delta !== null) {
            queryParameters = queryParameters.set('delta', <any>delta);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/{id}
     * Service for finding hproject
     * @param id id from which project object will retrieve
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findHProject(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findHProject(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findHProject(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findHProject(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findHProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/{id}/areas
     * Return the list of project areas
     * @param id id of the project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHProjectAreaList(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getHProjectAreaList(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getHProjectAreaList(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getHProjectAreaList(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHProjectAreaList.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/${encodeURIComponent(String(id))}/areas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/{id}/tree
     * Return the project tree in JSON format
     * @param id id of the project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHProjectTreeView(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getHProjectTreeView(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getHProjectTreeView(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getHProjectTreeView(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getHProjectTreeView.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/${encodeURIComponent(String(id))}/tree`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/auto-register-project
     * Service for adding a new empty hproject entity for autoregister devices with gateway
     * @param body HProject entity which must be saved 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveAutoRegisteredHProject(body: HProject, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveAutoRegisteredHProject(body: HProject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveAutoRegisteredHProject(body: HProject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveAutoRegisteredHProject(body: HProject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveAutoRegisteredHProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/auto-register-project`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects
     * Service for adding a new hproject entity
     * @param body HProject entity which must be saved 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveHProject(body: HProject, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveHProject(body: HProject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveHProject(body: HProject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveHProject(body: HProject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveHProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/{hProjectId}/hpackets/{rowKeyLowerBound}/{rowKeyUpperBound}
     * Service for scan HProject data
     * @param hProjectId HProject ID from retrieve HPackets in Avro format and events
     * @param rowKeyLowerBound HBase row key lower bound
     * @param rowKeyUpperBound HBase row key upper bound
     * @param packetIds HPacket list, containing comma separated ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scanHProject(hProjectId: number, rowKeyLowerBound: number, rowKeyUpperBound: number, packetIds: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public scanHProject(hProjectId: number, rowKeyLowerBound: number, rowKeyUpperBound: number, packetIds: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public scanHProject(hProjectId: number, rowKeyLowerBound: number, rowKeyUpperBound: number, packetIds: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public scanHProject(hProjectId: number, rowKeyLowerBound: number, rowKeyUpperBound: number, packetIds: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (hProjectId === null || hProjectId === undefined) {
            throw new Error('Required parameter hProjectId was null or undefined when calling scanHProject.');
        }

        if (rowKeyLowerBound === null || rowKeyLowerBound === undefined) {
            throw new Error('Required parameter rowKeyLowerBound was null or undefined when calling scanHProject.');
        }

        if (rowKeyUpperBound === null || rowKeyUpperBound === undefined) {
            throw new Error('Required parameter rowKeyUpperBound was null or undefined when calling scanHProject.');
        }

        if (packetIds === null || packetIds === undefined) {
            throw new Error('Required parameter packetIds was null or undefined when calling scanHProject.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (packetIds !== undefined && packetIds !== null) {
            queryParameters = queryParameters.set('packetIds', <any>packetIds);
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/${encodeURIComponent(String(hProjectId))}/hpackets/${encodeURIComponent(String(rowKeyLowerBound))}/${encodeURIComponent(String(rowKeyUpperBound))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/timeline/events/count/{projectId}/{startTime}/{endTime}
     * Service for count data and get it back
     * @param projectId Project ID
     * @param startTime Scanning start time
     * @param endTime Scanning end time
     * @param packetIds HPacket list, containing comma separated ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timelineEventCount(projectId: number, startTime: number, endTime: number, packetIds: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public timelineEventCount(projectId: number, startTime: number, endTime: number, packetIds: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public timelineEventCount(projectId: number, startTime: number, endTime: number, packetIds: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public timelineEventCount(projectId: number, startTime: number, endTime: number, packetIds: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling timelineEventCount.');
        }

        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling timelineEventCount.');
        }

        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling timelineEventCount.');
        }

        if (packetIds === null || packetIds === undefined) {
            throw new Error('Required parameter packetIds was null or undefined when calling timelineEventCount.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (packetIds !== undefined && packetIds !== null) {
            queryParameters = queryParameters.set('packetIds', <any>packetIds);
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/timeline/events/count/${encodeURIComponent(String(projectId))}/${encodeURIComponent(String(startTime))}/${encodeURIComponent(String(endTime))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects/timeline/events/{tableName}/{step}/{startTime}/{endTime}/{timezone}
     * Service for scan data and get it back for timeline queries
     * @param tableName Table name which count hpackets from
     * @param step Scanning step
     * @param startTime Scanning start time
     * @param endTime Scanning end time
     * @param timezone Timezone Timezone of client which has invoked the method, i.e. Europe/Rome
     * @param packetIds HPacket list, containing comma separated ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timelineScan(tableName: string, step: string, startTime: number, endTime: number, timezone: string, packetIds: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public timelineScan(tableName: string, step: string, startTime: number, endTime: number, timezone: string, packetIds: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public timelineScan(tableName: string, step: string, startTime: number, endTime: number, timezone: string, packetIds: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public timelineScan(tableName: string, step: string, startTime: number, endTime: number, timezone: string, packetIds: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling timelineScan.');
        }

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling timelineScan.');
        }

        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling timelineScan.');
        }

        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling timelineScan.');
        }

        if (timezone === null || timezone === undefined) {
            throw new Error('Required parameter timezone was null or undefined when calling timelineScan.');
        }

        if (packetIds === null || packetIds === undefined) {
            throw new Error('Required parameter packetIds was null or undefined when calling timelineScan.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (packetIds !== undefined && packetIds !== null) {
            queryParameters = queryParameters.set('packetIds', <any>packetIds);
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/timeline/events/${encodeURIComponent(String(tableName))}/${encodeURIComponent(String(step))}/${encodeURIComponent(String(startTime))}/${encodeURIComponent(String(endTime))}/${encodeURIComponent(String(timezone))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /hyperiot/hprojects
     * Service for updating a hproject entity
     * @param body HProject entity which must be updated 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateHProject(body: HProject, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateHProject(body: HProject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateHProject(body: HProject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateHProject(body: HProject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateHProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
